initSidebarItems({"enum":[["BlockBasedIndexType","Used by BlockBasedOptions::set_index_type."],["DBCompactionStyle",""],["DBCompressionType",""],["DBRecoveryMode",""],["Direction",""],["IteratorMode",""],["MemtableFactory","Defines the underlying memtable implementation. See https://github.com/facebook/rocksdb/wiki/MemTable for more information."]],"mod":[["backup",""],["checkpoint",""],["column_family",""],["compaction_filter",""],["ffi_util",""],["merge_operator","rustic merge operator"],["ops",""],["prelude",""]],"struct":[["BlockBasedOptions","For configuring block-based file storage."],["ColumnFamily","An opaque type used to represent a column family. Returned from some functions, and used in others"],["DB","A RocksDB database."],["DBIterator","An iterator over a database or column family, with specifiable ranges and direction."],["DBPinnableSlice","Wrapper around RocksDB PinnableSlice struct."],["DBRawIterator",""],["DBVector","Vector of bytes stored in the database."],["Error","A simple wrapper round a string, used for errors reported from ffi calls."],["FlushOptions","Optionally wait for the memtable flush to be performed."],["OptimisticTransaction",""],["OptimisticTransactionDB","A optimistic transaction database."],["OptimisticTransactionOptions",""],["OptimisticTransactionSnapshot",""],["Options","Database-wide options around performance and behavior."],["PlainTableFactoryOptions","Used with DBOptions::set_plain_table_factory. See https://github.com/facebook/rocksdb/wiki/PlainTable-Format."],["ReadOnlyDB",""],["ReadOptions",""],["SecondaryDB",""],["SecondaryOpenDescriptor",""],["SliceTransform","A SliceTranform is a generic pluggable way of transforming one string to another. Its primary use-case is in configuring rocksdb to store prefix blooms by setting prefix_extractor in ColumnFamilyOptions."],["Snapshot","A consistent view of the database at the point of creation."],["TemporaryDBPath","Ensures that DB::Destroy is called and the directory is deleted for this database when TemporaryDBPath is dropped."],["Transaction",""],["TransactionDB","A transaction database."],["TransactionDBOptions",""],["TransactionOptions",""],["TransactionSnapshot",""],["WriteBatch","An atomic batch of write operations."],["WriteOptions","Optionally disable WAL or sync for this write."]],"trait":[["ConstHandle",""],["Handle","Provides access to underlying handles for database operations"]]});